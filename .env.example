# Generate a jwk-formatted AES-CBC key (for SECRET_CLIENT_COOKIE_VAR), e.g. by running
# crypto.subtle
#   .generateKey(
#     {
#       name: "AES-CBC",
#       length: 256,
#     },
#     true,
#     ["encrypt", "decrypt"]
#   )
#   .then((key) => crypto.subtle.exportKey("jwk", key))
#   .then(JSON.stringify)
#   .then(console.log);
SECRET_CLIENT_COOKIE_VAR="{"key_ops":["encrypt","decrypt"],"ext":true,"kty":"oct","k":"asdas....","alg":"A256CBC"}"

NEXTAUTH_URL=http://localhost:3000
# some random string
NEXTAUTH_SECRET=

# Postgres Database URL
# postgresql://user:password@host:port/dbname
DATABASE_URL=

# Google OAuth (for login)
GOOGLE_CLIENT_SECRET=
GOOGLE_CLIENT_ID=

# Hardcoded allowed emails (for google login)
# email1@gmail.com,email2@gmail.com
ALLOWED_EMAILS=

# OpenAI API (for embdedding recommendations)
OPENAI_API_KEY=

# Upstash Redis (for caching)
UPSTASH_REDIS_REST_URL=
UPSTASH_REDIS_REST_TOKEN=

# Cloudinary (for image upload)
NEXT_PUBLIC_CLOUDINARY_CLOUD_NAME=
NEXT_PUBLIC_CLOUDINARY_FOLDER=tagall
CLOUDINARY_API_KEY=
CLOUDINARY_API_SECRET=
