generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

enum Role {
    USER
    ADMIN
}

// Necessary for Next auth
model Account {
    id String @id @default(cuid())

    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? // @db.Text
    access_token             String? // @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? // @db.Text
    session_state            String?
    refresh_token_expires_in Int?

    user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId String

    @@unique([provider, providerAccountId])
}

model Session {
    id String @id @default(cuid())

    sessionToken String   @unique
    expires      DateTime

    user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId String
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model User {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())

    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    role          Role      @default(USER)

    accounts       Account[]
    sessions       Session[]
    tags           Tag[]
    tagsCategories TagCategory[]
    itemComments   ItemComment[]
    userToItems    UserToItem[]
    collections    Collection[]

    @@index([role, id, email])
}

model UserToItem {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId       String
    item         Item          @relation(fields: [itemId], references: [id], onDelete: Cascade)
    itemId       String
    tags         Tag[]
    collection   Collection    @relation(fields: [collectionId], references: [id], onDelete: Cascade)
    collectionId String
    itemComments ItemComment[]

    @@index([createdAt, userId, itemId, id])
}

model Item {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    name        String
    description String?
    image       String?

    userToItems UserToItem[]
    defaultTags DefaultTag[]
}

model ItemComment {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    title       String
    description String?

    userToItem   UserToItem @relation(fields: [userToItemId], references: [id], onDelete: Cascade)
    userToItemId String
    user         User       @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId       String
    tags         Tag[]

    @@index([createdAt, userId, userToItemId, id])
}

model Collection {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    name String

    user                User              @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId              String
    defaultCollection   DefaultCollection @relation(fields: [defaultCollectionId], references: [id])
    defaultCollectionId String
    userToItem          UserToItem[]
    tagCategories       TagCategory[]

    @@index([name, createdAt, userId, id])
}

model DefaultCollection {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    name String

    collections          Collection[]
    defaultTagCategories DefaultTagCategory[]
    parseMethods         ParseMethod[]
}

model ParseMethod {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    name        String
    description String?
    icon        String?

    defaultCollections DefaultCollection[]
}

model Tag {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())

    name String

    tagCategory   TagCategory   @relation(fields: [tagCategoryId], references: [id], onDelete: Cascade)
    tagCategoryId String
    user          User          @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId        String
    userToItems   UserToItem[]
    itemComment   ItemComment[]

    @@index([createdAt, tagCategoryId, userId, id])
}

model DefaultTag {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())

    name String

    items                Item[]
    defaultTagCategory   DefaultTagCategory? @relation(fields: [defaultTagCategoryId], references: [id])
    defaultTagCategoryId String?

    @@index([defaultTagCategoryId, id])
}

model TagCategory {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())

    name          String
    icon          String?
    isItemHasMany Boolean @default(false)
    priority      Int     @default(0)

    user        User         @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId      String
    tags        Tag[]
    collections Collection[]

    @@index([createdAt, priority, userId, id])
}

model DefaultTagCategory {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())

    name          String
    icon          String?
    isItemHasMany Boolean @default(false)
    priority      Int     @default(0)

    defaultTags        DefaultTag[]
    defaultCollections DefaultCollection[]

    @@index([priority, id])
}
