generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

enum Role {
    USER
    ADMIN
}

// Necessary for Next auth
model Account {
    id String @id @default(cuid())

    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? // @db.Text
    access_token             String? // @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? // @db.Text
    session_state            String?
    refresh_token_expires_in Int?

    user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId String

    @@unique([provider, providerAccountId])
}

model Session {
    id String @id @default(cuid())

    sessionToken String   @unique
    expires      DateTime

    user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId String
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model User {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())

    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    role          Role      @default(USER)

    accounts       Account[]
    sessions       Session[]
    items          Item[]
    tags           Tag[]
    tagsCategories TagCategory[]
    itemComments   ItemComment[]
    itemTextBlocks ItemTextBlock[]
    collections    Collection[]

    @@index([role, id, email])
}

model Item {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    name  String
    image String?

    user           User            @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId         String
    tags           Tag[]
    itemComments   ItemComment[]
    itemTextBlocks ItemTextBlock[]

    @@index([name, createdAt, userId, id])
}

model ItemComment {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    title       String
    description String?

    tags   Tag[]
    item   Item   @relation(fields: [itemId], references: [id], onDelete: Cascade)
    itemId String
    user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId String

    @@index([createdAt, userId, itemId, id])
}

model ItemTextBlock {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    title       String
    description String?
    image       String?
    number      Int     @default(0)

    item   Item   @relation(fields: [itemId], references: [id], onDelete: Cascade)
    itemId String
    user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId String

    @@index([number, userId, itemId, id])
}

model Collection {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    name  String
    image String?

    user          User          @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId        String
    tagCategories TagCategory[]

    @@index([name, createdAt, userId, id])
}

model Tag {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())

    name String

    items         Item[]
    itemComments  ItemComment[]
    tagCategory   TagCategory   @relation(fields: [tagCategoryId], references: [id], onDelete: Cascade)
    tagCategoryId String
    user          User          @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId        String

    @@index([tagCategoryId, userId, name, id])
}

model TagCategory {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())

    name     String
    icon     String?
    isAuto   Boolean @default(false)
    priority Int     @default(0)

    tags        Tag[]
    user        User         @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId      String
    collections Collection[]

    @@index([priority, userId, id])
}
