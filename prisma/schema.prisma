generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["postgresqlExtensions"]
}

datasource db {
    provider   = "postgresql"
    url        = env("DATABASE_URL")
    extensions = [vector]
}

enum Role {
    USER
    ADMIN
}

enum ItemStatus {
    COMPLETED
    INPROGRESS
    NOTSTARTED
    ABANDONED
}

// #region Next auth
model Account {
    id String @id @default(cuid())

    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? // @db.Text
    access_token             String? // @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? // @db.Text
    session_state            String?
    refresh_token_expires_in Int?

    user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId String

    @@unique([provider, providerAccountId])
}

model Session {
    id String @id @default(cuid())

    sessionToken String   @unique
    expires      DateTime

    user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId String
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

// #endregion Next auth

model User {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())

    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    role          Role      @default(USER)

    accounts    Account[]
    sessions    Session[]
    tags        Tag[]
    userToItems UserToItem[]

    @@index([role, id, email])
}

model Collection {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    name     String @unique
    priority Int    @default(0)

    items       Item[]
    fieldGroups FieldGroup[]

    @@index([priority, id])
}

model Item {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    parsedId    String
    title       String
    image       String?
    year        Int?
    description String?
    embedding   Unsupported("vector(1536)")?

    fields       Field[]
    collection   Collection   @relation(fields: [collectionId], references: [id])
    collectionId String
    userToItems  UserToItem[]

    @@index([title, createdAt, year, id])
}

model ItemComment {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    title       String
    description String?
    rate        Int?
    status      ItemStatus @default(COMPLETED)
    private     Boolean    @default(false)

    userToItem   UserToItem @relation(fields: [userToItemId], references: [id], onDelete: Cascade)
    userToItemId String

    @@index([createdAt, userToItemId, id])
}

model UserToItem {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    rate   Int?
    status ItemStatus @default(NOTSTARTED)

    user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId       String
    item         Item          @relation(fields: [itemId], references: [id], onDelete: Cascade)
    itemId       String
    tags         Tag[]
    itemComments ItemComment[]

    @@unique([userId, itemId])
    @@index([createdAt, rate, status, userId, itemId, id])
}

model FieldGroup {
    id String @id @default(cuid())

    name        String  @unique
    priority    Int     @default(0)
    isFiltering Boolean @default(false)

    fields      Field[]
    collections Collection[]

    @@index([name, priority, isFiltering, id])
}

model Field {
    id String @id @default(cuid())

    value String @unique

    items        Item[]
    fieldGroup   FieldGroup @relation(fields: [fieldGroupId], references: [id])
    fieldGroupId String

    @@index([value, id])
}

model Tag {
    id String @id @default(cuid())

    name     String
    priority Int    @default(0)

    user        User         @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId      String
    userToItems UserToItem[]

    @@index([priority, id])
}
